# coding: utf-8

"""
    Persona

    KSF Media unified login service  # noqa: E501

    OpenAPI spec version: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PausedSubscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'paused_subscription_subsno': 'int',
        'paused_subscription_sleep_start_date': 'date',
        'paused_subscription_sleep_end_date': 'date',
        'paused_subscription_credit_type': 'str',
        'paused_subscription_credit_amount': 'int',
        'paused_subscription_sleep_type': 'str',
        'paused_subscription_credited': 'bool',
        'paused_subscription_credit_invno': 'int',
        'paused_subscription_booking_date': 'str',
        'paused_subscription_allow_webpaper': 'bool',
        'paused_subscription_receive_type': 'str',
        'paused_subscription_confirm_status': 'str',
        'paused_subscription_stamp_user': 'str'
    }

    attribute_map = {
        'paused_subscription_subsno': 'pausedSubscriptionSubsno',
        'paused_subscription_sleep_start_date': 'pausedSubscriptionSleepStartDate',
        'paused_subscription_sleep_end_date': 'pausedSubscriptionSleepEndDate',
        'paused_subscription_credit_type': 'pausedSubscriptionCreditType',
        'paused_subscription_credit_amount': 'pausedSubscriptionCreditAmount',
        'paused_subscription_sleep_type': 'pausedSubscriptionSleepType',
        'paused_subscription_credited': 'pausedSubscriptionCredited',
        'paused_subscription_credit_invno': 'pausedSubscriptionCreditInvno',
        'paused_subscription_booking_date': 'pausedSubscriptionBookingDate',
        'paused_subscription_allow_webpaper': 'pausedSubscriptionAllowWebpaper',
        'paused_subscription_receive_type': 'pausedSubscriptionReceiveType',
        'paused_subscription_confirm_status': 'pausedSubscriptionConfirmStatus',
        'paused_subscription_stamp_user': 'pausedSubscriptionStampUser'
    }

    def __init__(self, paused_subscription_subsno=None, paused_subscription_sleep_start_date=None, paused_subscription_sleep_end_date=None, paused_subscription_credit_type=None, paused_subscription_credit_amount=None, paused_subscription_sleep_type=None, paused_subscription_credited=None, paused_subscription_credit_invno=None, paused_subscription_booking_date=None, paused_subscription_allow_webpaper=None, paused_subscription_receive_type=None, paused_subscription_confirm_status=None, paused_subscription_stamp_user=None):  # noqa: E501
        """PausedSubscription - a model defined in OpenAPI"""  # noqa: E501

        self._paused_subscription_subsno = None
        self._paused_subscription_sleep_start_date = None
        self._paused_subscription_sleep_end_date = None
        self._paused_subscription_credit_type = None
        self._paused_subscription_credit_amount = None
        self._paused_subscription_sleep_type = None
        self._paused_subscription_credited = None
        self._paused_subscription_credit_invno = None
        self._paused_subscription_booking_date = None
        self._paused_subscription_allow_webpaper = None
        self._paused_subscription_receive_type = None
        self._paused_subscription_confirm_status = None
        self._paused_subscription_stamp_user = None
        self.discriminator = None

        self.paused_subscription_subsno = paused_subscription_subsno
        self.paused_subscription_sleep_start_date = paused_subscription_sleep_start_date
        self.paused_subscription_sleep_end_date = paused_subscription_sleep_end_date
        self.paused_subscription_credit_type = paused_subscription_credit_type
        self.paused_subscription_credit_amount = paused_subscription_credit_amount
        self.paused_subscription_sleep_type = paused_subscription_sleep_type
        self.paused_subscription_credited = paused_subscription_credited
        self.paused_subscription_credit_invno = paused_subscription_credit_invno
        self.paused_subscription_booking_date = paused_subscription_booking_date
        self.paused_subscription_allow_webpaper = paused_subscription_allow_webpaper
        self.paused_subscription_receive_type = paused_subscription_receive_type
        self.paused_subscription_confirm_status = paused_subscription_confirm_status
        self.paused_subscription_stamp_user = paused_subscription_stamp_user

    @property
    def paused_subscription_subsno(self):
        """Gets the paused_subscription_subsno of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_subsno of this PausedSubscription.  # noqa: E501
        :rtype: int
        """
        return self._paused_subscription_subsno

    @paused_subscription_subsno.setter
    def paused_subscription_subsno(self, paused_subscription_subsno):
        """Sets the paused_subscription_subsno of this PausedSubscription.


        :param paused_subscription_subsno: The paused_subscription_subsno of this PausedSubscription.  # noqa: E501
        :type: int
        """
        if paused_subscription_subsno is None:
            raise ValueError("Invalid value for `paused_subscription_subsno`, must not be `None`")  # noqa: E501
        if paused_subscription_subsno is not None and paused_subscription_subsno > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `paused_subscription_subsno`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if paused_subscription_subsno is not None and paused_subscription_subsno < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `paused_subscription_subsno`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._paused_subscription_subsno = paused_subscription_subsno

    @property
    def paused_subscription_sleep_start_date(self):
        """Gets the paused_subscription_sleep_start_date of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_sleep_start_date of this PausedSubscription.  # noqa: E501
        :rtype: date
        """
        return self._paused_subscription_sleep_start_date

    @paused_subscription_sleep_start_date.setter
    def paused_subscription_sleep_start_date(self, paused_subscription_sleep_start_date):
        """Sets the paused_subscription_sleep_start_date of this PausedSubscription.


        :param paused_subscription_sleep_start_date: The paused_subscription_sleep_start_date of this PausedSubscription.  # noqa: E501
        :type: date
        """
        if paused_subscription_sleep_start_date is None:
            raise ValueError("Invalid value for `paused_subscription_sleep_start_date`, must not be `None`")  # noqa: E501

        self._paused_subscription_sleep_start_date = paused_subscription_sleep_start_date

    @property
    def paused_subscription_sleep_end_date(self):
        """Gets the paused_subscription_sleep_end_date of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_sleep_end_date of this PausedSubscription.  # noqa: E501
        :rtype: date
        """
        return self._paused_subscription_sleep_end_date

    @paused_subscription_sleep_end_date.setter
    def paused_subscription_sleep_end_date(self, paused_subscription_sleep_end_date):
        """Sets the paused_subscription_sleep_end_date of this PausedSubscription.


        :param paused_subscription_sleep_end_date: The paused_subscription_sleep_end_date of this PausedSubscription.  # noqa: E501
        :type: date
        """
        if paused_subscription_sleep_end_date is None:
            raise ValueError("Invalid value for `paused_subscription_sleep_end_date`, must not be `None`")  # noqa: E501

        self._paused_subscription_sleep_end_date = paused_subscription_sleep_end_date

    @property
    def paused_subscription_credit_type(self):
        """Gets the paused_subscription_credit_type of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_credit_type of this PausedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._paused_subscription_credit_type

    @paused_subscription_credit_type.setter
    def paused_subscription_credit_type(self, paused_subscription_credit_type):
        """Sets the paused_subscription_credit_type of this PausedSubscription.


        :param paused_subscription_credit_type: The paused_subscription_credit_type of this PausedSubscription.  # noqa: E501
        :type: str
        """
        if paused_subscription_credit_type is None:
            raise ValueError("Invalid value for `paused_subscription_credit_type`, must not be `None`")  # noqa: E501

        self._paused_subscription_credit_type = paused_subscription_credit_type

    @property
    def paused_subscription_credit_amount(self):
        """Gets the paused_subscription_credit_amount of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_credit_amount of this PausedSubscription.  # noqa: E501
        :rtype: int
        """
        return self._paused_subscription_credit_amount

    @paused_subscription_credit_amount.setter
    def paused_subscription_credit_amount(self, paused_subscription_credit_amount):
        """Sets the paused_subscription_credit_amount of this PausedSubscription.


        :param paused_subscription_credit_amount: The paused_subscription_credit_amount of this PausedSubscription.  # noqa: E501
        :type: int
        """
        if paused_subscription_credit_amount is None:
            raise ValueError("Invalid value for `paused_subscription_credit_amount`, must not be `None`")  # noqa: E501
        if paused_subscription_credit_amount is not None and paused_subscription_credit_amount > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `paused_subscription_credit_amount`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if paused_subscription_credit_amount is not None and paused_subscription_credit_amount < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `paused_subscription_credit_amount`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._paused_subscription_credit_amount = paused_subscription_credit_amount

    @property
    def paused_subscription_sleep_type(self):
        """Gets the paused_subscription_sleep_type of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_sleep_type of this PausedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._paused_subscription_sleep_type

    @paused_subscription_sleep_type.setter
    def paused_subscription_sleep_type(self, paused_subscription_sleep_type):
        """Sets the paused_subscription_sleep_type of this PausedSubscription.


        :param paused_subscription_sleep_type: The paused_subscription_sleep_type of this PausedSubscription.  # noqa: E501
        :type: str
        """
        if paused_subscription_sleep_type is None:
            raise ValueError("Invalid value for `paused_subscription_sleep_type`, must not be `None`")  # noqa: E501

        self._paused_subscription_sleep_type = paused_subscription_sleep_type

    @property
    def paused_subscription_credited(self):
        """Gets the paused_subscription_credited of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_credited of this PausedSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._paused_subscription_credited

    @paused_subscription_credited.setter
    def paused_subscription_credited(self, paused_subscription_credited):
        """Sets the paused_subscription_credited of this PausedSubscription.


        :param paused_subscription_credited: The paused_subscription_credited of this PausedSubscription.  # noqa: E501
        :type: bool
        """
        if paused_subscription_credited is None:
            raise ValueError("Invalid value for `paused_subscription_credited`, must not be `None`")  # noqa: E501

        self._paused_subscription_credited = paused_subscription_credited

    @property
    def paused_subscription_credit_invno(self):
        """Gets the paused_subscription_credit_invno of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_credit_invno of this PausedSubscription.  # noqa: E501
        :rtype: int
        """
        return self._paused_subscription_credit_invno

    @paused_subscription_credit_invno.setter
    def paused_subscription_credit_invno(self, paused_subscription_credit_invno):
        """Sets the paused_subscription_credit_invno of this PausedSubscription.


        :param paused_subscription_credit_invno: The paused_subscription_credit_invno of this PausedSubscription.  # noqa: E501
        :type: int
        """
        if paused_subscription_credit_invno is None:
            raise ValueError("Invalid value for `paused_subscription_credit_invno`, must not be `None`")  # noqa: E501
        if paused_subscription_credit_invno is not None and paused_subscription_credit_invno > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `paused_subscription_credit_invno`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if paused_subscription_credit_invno is not None and paused_subscription_credit_invno < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `paused_subscription_credit_invno`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._paused_subscription_credit_invno = paused_subscription_credit_invno

    @property
    def paused_subscription_booking_date(self):
        """Gets the paused_subscription_booking_date of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_booking_date of this PausedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._paused_subscription_booking_date

    @paused_subscription_booking_date.setter
    def paused_subscription_booking_date(self, paused_subscription_booking_date):
        """Sets the paused_subscription_booking_date of this PausedSubscription.


        :param paused_subscription_booking_date: The paused_subscription_booking_date of this PausedSubscription.  # noqa: E501
        :type: str
        """
        if paused_subscription_booking_date is None:
            raise ValueError("Invalid value for `paused_subscription_booking_date`, must not be `None`")  # noqa: E501

        self._paused_subscription_booking_date = paused_subscription_booking_date

    @property
    def paused_subscription_allow_webpaper(self):
        """Gets the paused_subscription_allow_webpaper of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_allow_webpaper of this PausedSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._paused_subscription_allow_webpaper

    @paused_subscription_allow_webpaper.setter
    def paused_subscription_allow_webpaper(self, paused_subscription_allow_webpaper):
        """Sets the paused_subscription_allow_webpaper of this PausedSubscription.


        :param paused_subscription_allow_webpaper: The paused_subscription_allow_webpaper of this PausedSubscription.  # noqa: E501
        :type: bool
        """
        if paused_subscription_allow_webpaper is None:
            raise ValueError("Invalid value for `paused_subscription_allow_webpaper`, must not be `None`")  # noqa: E501

        self._paused_subscription_allow_webpaper = paused_subscription_allow_webpaper

    @property
    def paused_subscription_receive_type(self):
        """Gets the paused_subscription_receive_type of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_receive_type of this PausedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._paused_subscription_receive_type

    @paused_subscription_receive_type.setter
    def paused_subscription_receive_type(self, paused_subscription_receive_type):
        """Sets the paused_subscription_receive_type of this PausedSubscription.


        :param paused_subscription_receive_type: The paused_subscription_receive_type of this PausedSubscription.  # noqa: E501
        :type: str
        """
        if paused_subscription_receive_type is None:
            raise ValueError("Invalid value for `paused_subscription_receive_type`, must not be `None`")  # noqa: E501

        self._paused_subscription_receive_type = paused_subscription_receive_type

    @property
    def paused_subscription_confirm_status(self):
        """Gets the paused_subscription_confirm_status of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_confirm_status of this PausedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._paused_subscription_confirm_status

    @paused_subscription_confirm_status.setter
    def paused_subscription_confirm_status(self, paused_subscription_confirm_status):
        """Sets the paused_subscription_confirm_status of this PausedSubscription.


        :param paused_subscription_confirm_status: The paused_subscription_confirm_status of this PausedSubscription.  # noqa: E501
        :type: str
        """
        if paused_subscription_confirm_status is None:
            raise ValueError("Invalid value for `paused_subscription_confirm_status`, must not be `None`")  # noqa: E501

        self._paused_subscription_confirm_status = paused_subscription_confirm_status

    @property
    def paused_subscription_stamp_user(self):
        """Gets the paused_subscription_stamp_user of this PausedSubscription.  # noqa: E501


        :return: The paused_subscription_stamp_user of this PausedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._paused_subscription_stamp_user

    @paused_subscription_stamp_user.setter
    def paused_subscription_stamp_user(self, paused_subscription_stamp_user):
        """Sets the paused_subscription_stamp_user of this PausedSubscription.


        :param paused_subscription_stamp_user: The paused_subscription_stamp_user of this PausedSubscription.  # noqa: E501
        :type: str
        """
        if paused_subscription_stamp_user is None:
            raise ValueError("Invalid value for `paused_subscription_stamp_user`, must not be `None`")  # noqa: E501

        self._paused_subscription_stamp_user = paused_subscription_stamp_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PausedSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
