# coding: utf-8

"""
    Persona

    KSF Media unified login service  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FreePass(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hash': 'str',
        'article_id': 'str',
        'expiry_time': 'str',
        'revoked': 'bool'
    }

    attribute_map = {
        'hash': 'hash',
        'article_id': 'articleId',
        'expiry_time': 'expiryTime',
        'revoked': 'revoked'
    }

    def __init__(self, hash=None, article_id=None, expiry_time=None, revoked=None):  # noqa: E501
        """FreePass - a model defined in OpenAPI"""  # noqa: E501

        self._hash = None
        self._article_id = None
        self._expiry_time = None
        self._revoked = None
        self.discriminator = None

        self.hash = hash
        self.article_id = article_id
        self.expiry_time = expiry_time
        self.revoked = revoked

    @property
    def hash(self):
        """Gets the hash of this FreePass.  # noqa: E501


        :return: The hash of this FreePass.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this FreePass.


        :param hash: The hash of this FreePass.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    @property
    def article_id(self):
        """Gets the article_id of this FreePass.  # noqa: E501


        :return: The article_id of this FreePass.  # noqa: E501
        :rtype: str
        """
        return self._article_id

    @article_id.setter
    def article_id(self, article_id):
        """Sets the article_id of this FreePass.


        :param article_id: The article_id of this FreePass.  # noqa: E501
        :type: str
        """
        if article_id is None:
            raise ValueError("Invalid value for `article_id`, must not be `None`")  # noqa: E501

        self._article_id = article_id

    @property
    def expiry_time(self):
        """Gets the expiry_time of this FreePass.  # noqa: E501


        :return: The expiry_time of this FreePass.  # noqa: E501
        :rtype: str
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this FreePass.


        :param expiry_time: The expiry_time of this FreePass.  # noqa: E501
        :type: str
        """
        if expiry_time is None:
            raise ValueError("Invalid value for `expiry_time`, must not be `None`")  # noqa: E501

        self._expiry_time = expiry_time

    @property
    def revoked(self):
        """Gets the revoked of this FreePass.  # noqa: E501


        :return: The revoked of this FreePass.  # noqa: E501
        :rtype: bool
        """
        return self._revoked

    @revoked.setter
    def revoked(self, revoked):
        """Sets the revoked of this FreePass.


        :param revoked: The revoked of this FreePass.  # noqa: E501
        :type: bool
        """
        if revoked is None:
            raise ValueError("Invalid value for `revoked`, must not be `None`")  # noqa: E501

        self._revoked = revoked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FreePass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
