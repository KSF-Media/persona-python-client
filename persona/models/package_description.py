# coding: utf-8

"""
    Persona

    KSF Media unified login service  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PackageDescription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'brand': 'str',
        'brand_long': 'str',
        'desc_short': 'str',
        'desc_long': 'str',
        'url': 'str',
        'days': 'str',
        'weekdays': 'str',
        'frequency': 'DescriptionFrequency',
        'includes': 'list[str]'
    }

    attribute_map = {
        'brand': 'brand',
        'brand_long': 'brandLong',
        'desc_short': 'descShort',
        'desc_long': 'descLong',
        'url': 'url',
        'days': 'days',
        'weekdays': 'weekdays',
        'frequency': 'frequency',
        'includes': 'includes'
    }

    def __init__(self, brand=None, brand_long=None, desc_short=None, desc_long=None, url=None, days=None, weekdays=None, frequency=None, includes=None):  # noqa: E501
        """PackageDescription - a model defined in OpenAPI"""  # noqa: E501

        self._brand = None
        self._brand_long = None
        self._desc_short = None
        self._desc_long = None
        self._url = None
        self._days = None
        self._weekdays = None
        self._frequency = None
        self._includes = None
        self.discriminator = None

        self.brand = brand
        self.brand_long = brand_long
        self.desc_short = desc_short
        self.desc_long = desc_long
        self.url = url
        self.days = days
        self.weekdays = weekdays
        self.frequency = frequency
        self.includes = includes

    @property
    def brand(self):
        """Gets the brand of this PackageDescription.  # noqa: E501

        Brand name  # noqa: E501

        :return: The brand of this PackageDescription.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PackageDescription.

        Brand name  # noqa: E501

        :param brand: The brand of this PackageDescription.  # noqa: E501
        :type: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")  # noqa: E501

        self._brand = brand

    @property
    def brand_long(self):
        """Gets the brand_long of this PackageDescription.  # noqa: E501

        Brand name, long  # noqa: E501

        :return: The brand_long of this PackageDescription.  # noqa: E501
        :rtype: str
        """
        return self._brand_long

    @brand_long.setter
    def brand_long(self, brand_long):
        """Sets the brand_long of this PackageDescription.

        Brand name, long  # noqa: E501

        :param brand_long: The brand_long of this PackageDescription.  # noqa: E501
        :type: str
        """
        if brand_long is None:
            raise ValueError("Invalid value for `brand_long`, must not be `None`")  # noqa: E501

        self._brand_long = brand_long

    @property
    def desc_short(self):
        """Gets the desc_short of this PackageDescription.  # noqa: E501

        Short description  # noqa: E501

        :return: The desc_short of this PackageDescription.  # noqa: E501
        :rtype: str
        """
        return self._desc_short

    @desc_short.setter
    def desc_short(self, desc_short):
        """Sets the desc_short of this PackageDescription.

        Short description  # noqa: E501

        :param desc_short: The desc_short of this PackageDescription.  # noqa: E501
        :type: str
        """
        if desc_short is None:
            raise ValueError("Invalid value for `desc_short`, must not be `None`")  # noqa: E501

        self._desc_short = desc_short

    @property
    def desc_long(self):
        """Gets the desc_long of this PackageDescription.  # noqa: E501

        Long description  # noqa: E501

        :return: The desc_long of this PackageDescription.  # noqa: E501
        :rtype: str
        """
        return self._desc_long

    @desc_long.setter
    def desc_long(self, desc_long):
        """Sets the desc_long of this PackageDescription.

        Long description  # noqa: E501

        :param desc_long: The desc_long of this PackageDescription.  # noqa: E501
        :type: str
        """
        if desc_long is None:
            raise ValueError("Invalid value for `desc_long`, must not be `None`")  # noqa: E501

        self._desc_long = desc_long

    @property
    def url(self):
        """Gets the url of this PackageDescription.  # noqa: E501

        Url for the current package  # noqa: E501

        :return: The url of this PackageDescription.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PackageDescription.

        Url for the current package  # noqa: E501

        :param url: The url of this PackageDescription.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def days(self):
        """Gets the days of this PackageDescription.  # noqa: E501

        How many days the package is active  # noqa: E501

        :return: The days of this PackageDescription.  # noqa: E501
        :rtype: str
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this PackageDescription.

        How many days the package is active  # noqa: E501

        :param days: The days of this PackageDescription.  # noqa: E501
        :type: str
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")  # noqa: E501

        self._days = days

    @property
    def weekdays(self):
        """Gets the weekdays of this PackageDescription.  # noqa: E501

        Weekdays for which the package is active  # noqa: E501

        :return: The weekdays of this PackageDescription.  # noqa: E501
        :rtype: str
        """
        return self._weekdays

    @weekdays.setter
    def weekdays(self, weekdays):
        """Sets the weekdays of this PackageDescription.

        Weekdays for which the package is active  # noqa: E501

        :param weekdays: The weekdays of this PackageDescription.  # noqa: E501
        :type: str
        """
        if weekdays is None:
            raise ValueError("Invalid value for `weekdays`, must not be `None`")  # noqa: E501

        self._weekdays = weekdays

    @property
    def frequency(self):
        """Gets the frequency of this PackageDescription.  # noqa: E501


        :return: The frequency of this PackageDescription.  # noqa: E501
        :rtype: DescriptionFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this PackageDescription.


        :param frequency: The frequency of this PackageDescription.  # noqa: E501
        :type: DescriptionFrequency
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501

        self._frequency = frequency

    @property
    def includes(self):
        """Gets the includes of this PackageDescription.  # noqa: E501

        Entitlements included in the package  # noqa: E501

        :return: The includes of this PackageDescription.  # noqa: E501
        :rtype: list[str]
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """Sets the includes of this PackageDescription.

        Entitlements included in the package  # noqa: E501

        :param includes: The includes of this PackageDescription.  # noqa: E501
        :type: list[str]
        """
        if includes is None:
            raise ValueError("Invalid value for `includes`, must not be `None`")  # noqa: E501

        self._includes = includes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
