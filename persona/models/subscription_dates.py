# coding: utf-8

"""
    Persona

    KSF Media unified login service  # noqa: E501

    OpenAPI spec version: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SubscriptionDates(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'len_months': 'int',
        'len_days': 'int',
        'start': 'date',
        'end': 'date',
        'unpaid_break': 'date',
        'invoicing_start': 'date',
        'paid_until': 'date',
        'suspend': 'date'
    }

    attribute_map = {
        'len_months': 'lenMonths',
        'len_days': 'lenDays',
        'start': 'start',
        'end': 'end',
        'unpaid_break': 'unpaidBreak',
        'invoicing_start': 'invoicingStart',
        'paid_until': 'paidUntil',
        'suspend': 'suspend'
    }

    def __init__(self, len_months=None, len_days=None, start=None, end=None, unpaid_break=None, invoicing_start=None, paid_until=None, suspend=None):  # noqa: E501
        """SubscriptionDates - a model defined in OpenAPI"""  # noqa: E501

        self._len_months = None
        self._len_days = None
        self._start = None
        self._end = None
        self._unpaid_break = None
        self._invoicing_start = None
        self._paid_until = None
        self._suspend = None
        self.discriminator = None

        if len_months is not None:
            self.len_months = len_months
        if len_days is not None:
            self.len_days = len_days
        self.start = start
        if end is not None:
            self.end = end
        if unpaid_break is not None:
            self.unpaid_break = unpaid_break
        if invoicing_start is not None:
            self.invoicing_start = invoicing_start
        if paid_until is not None:
            self.paid_until = paid_until
        if suspend is not None:
            self.suspend = suspend

    @property
    def len_months(self):
        """Gets the len_months of this SubscriptionDates.  # noqa: E501


        :return: The len_months of this SubscriptionDates.  # noqa: E501
        :rtype: int
        """
        return self._len_months

    @len_months.setter
    def len_months(self, len_months):
        """Sets the len_months of this SubscriptionDates.


        :param len_months: The len_months of this SubscriptionDates.  # noqa: E501
        :type: int
        """
        if len_months is not None and len_months > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `len_months`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if len_months is not None and len_months < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `len_months`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._len_months = len_months

    @property
    def len_days(self):
        """Gets the len_days of this SubscriptionDates.  # noqa: E501


        :return: The len_days of this SubscriptionDates.  # noqa: E501
        :rtype: int
        """
        return self._len_days

    @len_days.setter
    def len_days(self, len_days):
        """Sets the len_days of this SubscriptionDates.


        :param len_days: The len_days of this SubscriptionDates.  # noqa: E501
        :type: int
        """
        if len_days is not None and len_days > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `len_days`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if len_days is not None and len_days < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `len_days`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._len_days = len_days

    @property
    def start(self):
        """Gets the start of this SubscriptionDates.  # noqa: E501


        :return: The start of this SubscriptionDates.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SubscriptionDates.


        :param start: The start of this SubscriptionDates.  # noqa: E501
        :type: date
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this SubscriptionDates.  # noqa: E501


        :return: The end of this SubscriptionDates.  # noqa: E501
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this SubscriptionDates.


        :param end: The end of this SubscriptionDates.  # noqa: E501
        :type: date
        """

        self._end = end

    @property
    def unpaid_break(self):
        """Gets the unpaid_break of this SubscriptionDates.  # noqa: E501


        :return: The unpaid_break of this SubscriptionDates.  # noqa: E501
        :rtype: date
        """
        return self._unpaid_break

    @unpaid_break.setter
    def unpaid_break(self, unpaid_break):
        """Sets the unpaid_break of this SubscriptionDates.


        :param unpaid_break: The unpaid_break of this SubscriptionDates.  # noqa: E501
        :type: date
        """

        self._unpaid_break = unpaid_break

    @property
    def invoicing_start(self):
        """Gets the invoicing_start of this SubscriptionDates.  # noqa: E501


        :return: The invoicing_start of this SubscriptionDates.  # noqa: E501
        :rtype: date
        """
        return self._invoicing_start

    @invoicing_start.setter
    def invoicing_start(self, invoicing_start):
        """Sets the invoicing_start of this SubscriptionDates.


        :param invoicing_start: The invoicing_start of this SubscriptionDates.  # noqa: E501
        :type: date
        """

        self._invoicing_start = invoicing_start

    @property
    def paid_until(self):
        """Gets the paid_until of this SubscriptionDates.  # noqa: E501


        :return: The paid_until of this SubscriptionDates.  # noqa: E501
        :rtype: date
        """
        return self._paid_until

    @paid_until.setter
    def paid_until(self, paid_until):
        """Sets the paid_until of this SubscriptionDates.


        :param paid_until: The paid_until of this SubscriptionDates.  # noqa: E501
        :type: date
        """

        self._paid_until = paid_until

    @property
    def suspend(self):
        """Gets the suspend of this SubscriptionDates.  # noqa: E501


        :return: The suspend of this SubscriptionDates.  # noqa: E501
        :rtype: date
        """
        return self._suspend

    @suspend.setter
    def suspend(self, suspend):
        """Sets the suspend of this SubscriptionDates.


        :param suspend: The suspend of this SubscriptionDates.  # noqa: E501
        :type: date
        """

        self._suspend = suspend

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionDates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
