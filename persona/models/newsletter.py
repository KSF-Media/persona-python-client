# coding: utf-8

"""
    Persona

    KSF Media unified login service  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Newsletter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'list_id': 'str',
        'paper': 'str',
        'subscriptions': 'dict(str, list[NewsletterSubscription])'
    }

    attribute_map = {
        'list_id': 'listId',
        'paper': 'paper',
        'subscriptions': 'subscriptions'
    }

    def __init__(self, list_id=None, paper=None, subscriptions=None):  # noqa: E501
        """Newsletter - a model defined in OpenAPI"""  # noqa: E501

        self._list_id = None
        self._paper = None
        self._subscriptions = None
        self.discriminator = None

        self.list_id = list_id
        self.paper = paper
        self.subscriptions = subscriptions

    @property
    def list_id(self):
        """Gets the list_id of this Newsletter.  # noqa: E501


        :return: The list_id of this Newsletter.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this Newsletter.


        :param list_id: The list_id of this Newsletter.  # noqa: E501
        :type: str
        """
        if list_id is None:
            raise ValueError("Invalid value for `list_id`, must not be `None`")  # noqa: E501

        self._list_id = list_id

    @property
    def paper(self):
        """Gets the paper of this Newsletter.  # noqa: E501


        :return: The paper of this Newsletter.  # noqa: E501
        :rtype: str
        """
        return self._paper

    @paper.setter
    def paper(self, paper):
        """Sets the paper of this Newsletter.


        :param paper: The paper of this Newsletter.  # noqa: E501
        :type: str
        """
        if paper is None:
            raise ValueError("Invalid value for `paper`, must not be `None`")  # noqa: E501

        self._paper = paper

    @property
    def subscriptions(self):
        """Gets the subscriptions of this Newsletter.  # noqa: E501


        :return: The subscriptions of this Newsletter.  # noqa: E501
        :rtype: dict(str, list[NewsletterSubscription])
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this Newsletter.


        :param subscriptions: The subscriptions of this Newsletter.  # noqa: E501
        :type: dict(str, list[NewsletterSubscription])
        """
        if subscriptions is None:
            raise ValueError("Invalid value for `subscriptions`, must not be `None`")  # noqa: E501

        self._subscriptions = subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Newsletter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
