# coding: utf-8

"""
    Persona

    KSF Media unified login service  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TemporaryAddressChangeDates(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'old_start_date': 'date',
        'new_start_date': 'date',
        'new_end_date': 'date'
    }

    attribute_map = {
        'old_start_date': 'oldStartDate',
        'new_start_date': 'newStartDate',
        'new_end_date': 'newEndDate'
    }

    def __init__(self, old_start_date=None, new_start_date=None, new_end_date=None):  # noqa: E501
        """TemporaryAddressChangeDates - a model defined in OpenAPI"""  # noqa: E501

        self._old_start_date = None
        self._new_start_date = None
        self._new_end_date = None
        self.discriminator = None

        self.old_start_date = old_start_date
        self.new_start_date = new_start_date
        if new_end_date is not None:
            self.new_end_date = new_end_date

    @property
    def old_start_date(self):
        """Gets the old_start_date of this TemporaryAddressChangeDates.  # noqa: E501


        :return: The old_start_date of this TemporaryAddressChangeDates.  # noqa: E501
        :rtype: date
        """
        return self._old_start_date

    @old_start_date.setter
    def old_start_date(self, old_start_date):
        """Sets the old_start_date of this TemporaryAddressChangeDates.


        :param old_start_date: The old_start_date of this TemporaryAddressChangeDates.  # noqa: E501
        :type: date
        """
        if old_start_date is None:
            raise ValueError("Invalid value for `old_start_date`, must not be `None`")  # noqa: E501

        self._old_start_date = old_start_date

    @property
    def new_start_date(self):
        """Gets the new_start_date of this TemporaryAddressChangeDates.  # noqa: E501


        :return: The new_start_date of this TemporaryAddressChangeDates.  # noqa: E501
        :rtype: date
        """
        return self._new_start_date

    @new_start_date.setter
    def new_start_date(self, new_start_date):
        """Sets the new_start_date of this TemporaryAddressChangeDates.


        :param new_start_date: The new_start_date of this TemporaryAddressChangeDates.  # noqa: E501
        :type: date
        """
        if new_start_date is None:
            raise ValueError("Invalid value for `new_start_date`, must not be `None`")  # noqa: E501

        self._new_start_date = new_start_date

    @property
    def new_end_date(self):
        """Gets the new_end_date of this TemporaryAddressChangeDates.  # noqa: E501


        :return: The new_end_date of this TemporaryAddressChangeDates.  # noqa: E501
        :rtype: date
        """
        return self._new_end_date

    @new_end_date.setter
    def new_end_date(self, new_end_date):
        """Sets the new_end_date of this TemporaryAddressChangeDates.


        :param new_end_date: The new_end_date of this TemporaryAddressChangeDates.  # noqa: E501
        :type: date
        """

        self._new_end_date = new_end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemporaryAddressChangeDates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
