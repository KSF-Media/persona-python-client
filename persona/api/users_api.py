# coding: utf-8

"""
    Persona

    KSF Media unified login service  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from persona.api_client import ApiClient
from persona.exceptions import (
    ApiTypeError,
    ApiValueError
)


class UsersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def users_post(self, body, **kwargs):  # noqa: E501
        """Create a new user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewUser body: (required)
        :return: LoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def users_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewUser body: (required)
        :return: LoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `users_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoginResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_uuid_entitlement_get(self, uuid, **kwargs):  # noqa: E501
        """Get users entitlements.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_entitlement_get(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param str authorization:
        :param str cache_control:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_uuid_entitlement_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.users_uuid_entitlement_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def users_uuid_entitlement_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Get users entitlements.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_entitlement_get_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param str authorization:
        :param str cache_control:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid', 'authorization', 'cache_control']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_uuid_entitlement_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ApiValueError("Missing the required parameter `uuid` when calling `users_uuid_entitlement_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'cache_control' in local_var_params:
            header_params['Cache-Control'] = local_var_params['cache_control']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}/entitlement', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_uuid_gdpr_put(self, uuid, body, **kwargs):  # noqa: E501
        """Updates the GDPR consent settings for a given user.  # noqa: E501

        Authorization header expects the following format ‘OAuth {token}’  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_gdpr_put(uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param list[GdprConsent] body: (required)
        :param str authorization:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_uuid_gdpr_put_with_http_info(uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_uuid_gdpr_put_with_http_info(uuid, body, **kwargs)  # noqa: E501
            return data

    def users_uuid_gdpr_put_with_http_info(self, uuid, body, **kwargs):  # noqa: E501
        """Updates the GDPR consent settings for a given user.  # noqa: E501

        Authorization header expects the following format ‘OAuth {token}’  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_gdpr_put_with_http_info(uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param list[GdprConsent] body: (required)
        :param str authorization:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_uuid_gdpr_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ApiValueError("Missing the required parameter `uuid` when calling `users_uuid_gdpr_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `users_uuid_gdpr_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}/gdpr', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_uuid_get(self, uuid, **kwargs):  # noqa: E501
        """Get user by UUID.  # noqa: E501

        Authorization header expects the following format ‘OAuth {token}’  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_get(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param str authorization:
        :param str cache_control:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_uuid_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.users_uuid_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def users_uuid_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Get user by UUID.  # noqa: E501

        Authorization header expects the following format ‘OAuth {token}’  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_get_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param str authorization:
        :param str cache_control:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid', 'authorization', 'cache_control']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_uuid_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ApiValueError("Missing the required parameter `uuid` when calling `users_uuid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'cache_control' in local_var_params:
            header_params['Cache-Control'] = local_var_params['cache_control']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_uuid_legal_put(self, uuid, body, **kwargs):  # noqa: E501
        """Updates the legal consent settings for a given user.  # noqa: E501

        Authorization header expects the following format ‘OAuth {token}’  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_legal_put(uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param list[LegalConsent] body: (required)
        :param str authorization:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_uuid_legal_put_with_http_info(uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_uuid_legal_put_with_http_info(uuid, body, **kwargs)  # noqa: E501
            return data

    def users_uuid_legal_put_with_http_info(self, uuid, body, **kwargs):  # noqa: E501
        """Updates the legal consent settings for a given user.  # noqa: E501

        Authorization header expects the following format ‘OAuth {token}’  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_legal_put_with_http_info(uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param list[LegalConsent] body: (required)
        :param str authorization:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_uuid_legal_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ApiValueError("Missing the required parameter `uuid` when calling `users_uuid_legal_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `users_uuid_legal_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}/legal', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_uuid_patch(self, uuid, body, **kwargs):  # noqa: E501
        """Update a user  # noqa: E501

        Authorization header expects the following format ‘OAuth {token}’  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_patch(uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param UserUpdate body: (required)
        :param str authorization:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_uuid_patch_with_http_info(uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_uuid_patch_with_http_info(uuid, body, **kwargs)  # noqa: E501
            return data

    def users_uuid_patch_with_http_info(self, uuid, body, **kwargs):  # noqa: E501
        """Update a user  # noqa: E501

        Authorization header expects the following format ‘OAuth {token}’  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_patch_with_http_info(uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param UserUpdate body: (required)
        :param str authorization:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_uuid_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ApiValueError("Missing the required parameter `uuid` when calling `users_uuid_patch`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `users_uuid_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_uuid_subscriptions_subsno_address_change_post(self, uuid, subsno, body, **kwargs):  # noqa: E501
        """Make a temporary address change for a subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_subscriptions_subsno_address_change_post(uuid, subsno, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param int subsno: (required)
        :param TemporaryAddressChange body: (required)
        :param str authorization:
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_uuid_subscriptions_subsno_address_change_post_with_http_info(uuid, subsno, body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_uuid_subscriptions_subsno_address_change_post_with_http_info(uuid, subsno, body, **kwargs)  # noqa: E501
            return data

    def users_uuid_subscriptions_subsno_address_change_post_with_http_info(self, uuid, subsno, body, **kwargs):  # noqa: E501
        """Make a temporary address change for a subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_subscriptions_subsno_address_change_post_with_http_info(uuid, subsno, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param int subsno: (required)
        :param TemporaryAddressChange body: (required)
        :param str authorization:
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid', 'subsno', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_uuid_subscriptions_subsno_address_change_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ApiValueError("Missing the required parameter `uuid` when calling `users_uuid_subscriptions_subsno_address_change_post`")  # noqa: E501
        # verify the required parameter 'subsno' is set
        if ('subsno' not in local_var_params or
                local_var_params['subsno'] is None):
            raise ApiValueError("Missing the required parameter `subsno` when calling `users_uuid_subscriptions_subsno_address_change_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `users_uuid_subscriptions_subsno_address_change_post`")  # noqa: E501

        if 'subsno' in local_var_params and local_var_params['subsno'] > 9223372036854775807:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `subsno` when calling `users_uuid_subscriptions_subsno_address_change_post`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if 'subsno' in local_var_params and local_var_params['subsno'] < -9223372036854775808:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `subsno` when calling `users_uuid_subscriptions_subsno_address_change_post`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501
        if 'subsno' in local_var_params:
            path_params['subsno'] = local_var_params['subsno']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}/subscriptions/{subsno}/addressChange', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_uuid_subscriptions_subsno_pause_post(self, uuid, subsno, body, **kwargs):  # noqa: E501
        """Pause users subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_subscriptions_subsno_pause_post(uuid, subsno, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param int subsno: (required)
        :param SubscriptionPauseDates body: (required)
        :param str authorization:
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_uuid_subscriptions_subsno_pause_post_with_http_info(uuid, subsno, body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_uuid_subscriptions_subsno_pause_post_with_http_info(uuid, subsno, body, **kwargs)  # noqa: E501
            return data

    def users_uuid_subscriptions_subsno_pause_post_with_http_info(self, uuid, subsno, body, **kwargs):  # noqa: E501
        """Pause users subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_subscriptions_subsno_pause_post_with_http_info(uuid, subsno, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param int subsno: (required)
        :param SubscriptionPauseDates body: (required)
        :param str authorization:
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid', 'subsno', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_uuid_subscriptions_subsno_pause_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ApiValueError("Missing the required parameter `uuid` when calling `users_uuid_subscriptions_subsno_pause_post`")  # noqa: E501
        # verify the required parameter 'subsno' is set
        if ('subsno' not in local_var_params or
                local_var_params['subsno'] is None):
            raise ApiValueError("Missing the required parameter `subsno` when calling `users_uuid_subscriptions_subsno_pause_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `users_uuid_subscriptions_subsno_pause_post`")  # noqa: E501

        if 'subsno' in local_var_params and local_var_params['subsno'] > 9223372036854775807:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `subsno` when calling `users_uuid_subscriptions_subsno_pause_post`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if 'subsno' in local_var_params and local_var_params['subsno'] < -9223372036854775808:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `subsno` when calling `users_uuid_subscriptions_subsno_pause_post`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501
        if 'subsno' in local_var_params:
            path_params['subsno'] = local_var_params['subsno']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}/subscriptions/{subsno}/pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_uuid_subscriptions_subsno_reclamation_post(self, uuid, subsno, body, **kwargs):  # noqa: E501
        """Create a new delivery reclamation for a subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_subscriptions_subsno_reclamation_post(uuid, subsno, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param int subsno: (required)
        :param NewDeliveryReclamation body: (required)
        :param str authorization:
        :return: DeliveryReclamation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_uuid_subscriptions_subsno_reclamation_post_with_http_info(uuid, subsno, body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_uuid_subscriptions_subsno_reclamation_post_with_http_info(uuid, subsno, body, **kwargs)  # noqa: E501
            return data

    def users_uuid_subscriptions_subsno_reclamation_post_with_http_info(self, uuid, subsno, body, **kwargs):  # noqa: E501
        """Create a new delivery reclamation for a subscription  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_subscriptions_subsno_reclamation_post_with_http_info(uuid, subsno, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param int subsno: (required)
        :param NewDeliveryReclamation body: (required)
        :param str authorization:
        :return: DeliveryReclamation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid', 'subsno', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_uuid_subscriptions_subsno_reclamation_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ApiValueError("Missing the required parameter `uuid` when calling `users_uuid_subscriptions_subsno_reclamation_post`")  # noqa: E501
        # verify the required parameter 'subsno' is set
        if ('subsno' not in local_var_params or
                local_var_params['subsno'] is None):
            raise ApiValueError("Missing the required parameter `subsno` when calling `users_uuid_subscriptions_subsno_reclamation_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `users_uuid_subscriptions_subsno_reclamation_post`")  # noqa: E501

        if 'subsno' in local_var_params and local_var_params['subsno'] > 9223372036854775807:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `subsno` when calling `users_uuid_subscriptions_subsno_reclamation_post`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if 'subsno' in local_var_params and local_var_params['subsno'] < -9223372036854775808:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `subsno` when calling `users_uuid_subscriptions_subsno_reclamation_post`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501
        if 'subsno' in local_var_params:
            path_params['subsno'] = local_var_params['subsno']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}/subscriptions/{subsno}/reclamation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeliveryReclamation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_uuid_subscriptions_subsno_reclamations_reclaimno_get(self, uuid, subsno, reclaimno, **kwargs):  # noqa: E501
        """Get a delivery reclamation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_subscriptions_subsno_reclamations_reclaimno_get(uuid, subsno, reclaimno, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param int subsno: (required)
        :param int reclaimno: (required)
        :param str authorization:
        :return: DeliveryReclamation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_uuid_subscriptions_subsno_reclamations_reclaimno_get_with_http_info(uuid, subsno, reclaimno, **kwargs)  # noqa: E501
        else:
            (data) = self.users_uuid_subscriptions_subsno_reclamations_reclaimno_get_with_http_info(uuid, subsno, reclaimno, **kwargs)  # noqa: E501
            return data

    def users_uuid_subscriptions_subsno_reclamations_reclaimno_get_with_http_info(self, uuid, subsno, reclaimno, **kwargs):  # noqa: E501
        """Get a delivery reclamation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_subscriptions_subsno_reclamations_reclaimno_get_with_http_info(uuid, subsno, reclaimno, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param int subsno: (required)
        :param int reclaimno: (required)
        :param str authorization:
        :return: DeliveryReclamation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid', 'subsno', 'reclaimno', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_uuid_subscriptions_subsno_reclamations_reclaimno_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ApiValueError("Missing the required parameter `uuid` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_get`")  # noqa: E501
        # verify the required parameter 'subsno' is set
        if ('subsno' not in local_var_params or
                local_var_params['subsno'] is None):
            raise ApiValueError("Missing the required parameter `subsno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_get`")  # noqa: E501
        # verify the required parameter 'reclaimno' is set
        if ('reclaimno' not in local_var_params or
                local_var_params['reclaimno'] is None):
            raise ApiValueError("Missing the required parameter `reclaimno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_get`")  # noqa: E501

        if 'subsno' in local_var_params and local_var_params['subsno'] > 9223372036854775807:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `subsno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_get`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if 'subsno' in local_var_params and local_var_params['subsno'] < -9223372036854775808:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `subsno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_get`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501
        if 'reclaimno' in local_var_params and local_var_params['reclaimno'] > 9223372036854775807:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `reclaimno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_get`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if 'reclaimno' in local_var_params and local_var_params['reclaimno'] < -9223372036854775808:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `reclaimno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_get`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501
        if 'subsno' in local_var_params:
            path_params['subsno'] = local_var_params['subsno']  # noqa: E501
        if 'reclaimno' in local_var_params:
            path_params['reclaimno'] = local_var_params['reclaimno']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}/subscriptions/{subsno}/reclamations/{reclaimno}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeliveryReclamation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_uuid_subscriptions_subsno_reclamations_reclaimno_patch(self, uuid, subsno, reclaimno, body, **kwargs):  # noqa: E501
        """Update a delivery reclamation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_subscriptions_subsno_reclamations_reclaimno_patch(uuid, subsno, reclaimno, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param int subsno: (required)
        :param int reclaimno: (required)
        :param DeliveryReclamationUpdate body: (required)
        :param str authorization:
        :return: DeliveryReclamation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_uuid_subscriptions_subsno_reclamations_reclaimno_patch_with_http_info(uuid, subsno, reclaimno, body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_uuid_subscriptions_subsno_reclamations_reclaimno_patch_with_http_info(uuid, subsno, reclaimno, body, **kwargs)  # noqa: E501
            return data

    def users_uuid_subscriptions_subsno_reclamations_reclaimno_patch_with_http_info(self, uuid, subsno, reclaimno, body, **kwargs):  # noqa: E501
        """Update a delivery reclamation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_uuid_subscriptions_subsno_reclamations_reclaimno_patch_with_http_info(uuid, subsno, reclaimno, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param int subsno: (required)
        :param int reclaimno: (required)
        :param DeliveryReclamationUpdate body: (required)
        :param str authorization:
        :return: DeliveryReclamation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid', 'subsno', 'reclaimno', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_uuid_subscriptions_subsno_reclamations_reclaimno_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ApiValueError("Missing the required parameter `uuid` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_patch`")  # noqa: E501
        # verify the required parameter 'subsno' is set
        if ('subsno' not in local_var_params or
                local_var_params['subsno'] is None):
            raise ApiValueError("Missing the required parameter `subsno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_patch`")  # noqa: E501
        # verify the required parameter 'reclaimno' is set
        if ('reclaimno' not in local_var_params or
                local_var_params['reclaimno'] is None):
            raise ApiValueError("Missing the required parameter `reclaimno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_patch`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_patch`")  # noqa: E501

        if 'subsno' in local_var_params and local_var_params['subsno'] > 9223372036854775807:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `subsno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_patch`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if 'subsno' in local_var_params and local_var_params['subsno'] < -9223372036854775808:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `subsno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_patch`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501
        if 'reclaimno' in local_var_params and local_var_params['reclaimno'] > 9223372036854775807:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `reclaimno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_patch`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if 'reclaimno' in local_var_params and local_var_params['reclaimno'] < -9223372036854775808:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `reclaimno` when calling `users_uuid_subscriptions_subsno_reclamations_reclaimno_patch`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501
        if 'subsno' in local_var_params:
            path_params['subsno'] = local_var_params['subsno']  # noqa: E501
        if 'reclaimno' in local_var_params:
            path_params['reclaimno'] = local_var_params['reclaimno']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}/subscriptions/{subsno}/reclamations/{reclaimno}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeliveryReclamation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
