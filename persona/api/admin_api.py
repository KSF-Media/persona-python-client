# coding: utf-8

"""
    Persona

    KSF Media unified login service  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from persona.api_client import ApiClient
from persona.exceptions import (
    ApiTypeError,
    ApiValueError
)


class AdminApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def admin_free_pass_delete(self, body, **kwargs):  # noqa: E501
        """Revokes an existing free pass  # noqa: E501

        Revoking a free pass does not perform a hard delete, but rather marks the free pass with the given hash as being revoked in the DB. This is the only sensible way of deleting free passes as this kind of state information cannot be included in hashes. Revoked free passes can be reinstated with a simple SQL query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_free_pass_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str auth_user:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_free_pass_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_free_pass_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_free_pass_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """Revokes an existing free pass  # noqa: E501

        Revoking a free pass does not perform a hard delete, but rather marks the free pass with the given hash as being revoked in the DB. This is the only sensible way of deleting free passes as this kind of state information cannot be included in hashes. Revoked free passes can be reinstated with a simple SQL query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_free_pass_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str auth_user:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body', 'auth_user', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_free_pass_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `admin_free_pass_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'auth_user' in local_var_params:
            header_params['AuthUser'] = local_var_params['auth_user']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/admin/free-pass', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_free_pass_post(self, body, **kwargs):  # noqa: E501
        """Creates a free pass to an article  # noqa: E501

        Free passes can be used to temporarily bypass the paywall for individual articles. This endpoint is stateless (and thus deterministic).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_free_pass_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FreePassInput body: (required)
        :param str auth_user:
        :param str authorization:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_free_pass_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_free_pass_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_free_pass_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates a free pass to an article  # noqa: E501

        Free passes can be used to temporarily bypass the paywall for individual articles. This endpoint is stateless (and thus deterministic).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_free_pass_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FreePassInput body: (required)
        :param str auth_user:
        :param str authorization:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body', 'auth_user', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_free_pass_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `admin_free_pass_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'auth_user' in local_var_params:
            header_params['AuthUser'] = local_var_params['auth_user']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/admin/free-pass', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_free_passes_get(self, **kwargs):  # noqa: E501
        """Lists all free passes  # noqa: E501

        This end point returns the list of all free passes, including those that have been expired or revoked.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_free_passes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_user:
        :param str authorization:
        :return: list[FreePass]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_free_passes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.admin_free_passes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def admin_free_passes_get_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all free passes  # noqa: E501

        This end point returns the list of all free passes, including those that have been expired or revoked.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_free_passes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auth_user:
        :param str authorization:
        :return: list[FreePass]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['auth_user', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_free_passes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'auth_user' in local_var_params:
            header_params['AuthUser'] = local_var_params['auth_user']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/admin/free-passes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FreePass]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_search_post(self, body, **kwargs):  # noqa: E501
        """Search for users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_search_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchQuery body: (required)
        :param str auth_user:
        :param str authorization:
        :return: list[SearchResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_search_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_search_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_search_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search for users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_search_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchQuery body: (required)
        :param str auth_user:
        :param str authorization:
        :return: list[SearchResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body', 'auth_user', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_search_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `admin_search_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'auth_user' in local_var_params:
            header_params['AuthUser'] = local_var_params['auth_user']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/admin/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SearchResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_transfer_passive_subscribers_listid_post(self, listid, **kwargs):  # noqa: E501
        """Transfers passive customers from Kayak to Mailchimp  # noqa: E501

        Passive subscribers/members/customers are users who don't have active entitlements and haven't opted out from email marketing. For the given list (audience) ID, this endpoint transfers the list of passive subscribers from Kayak to Mailchimp (via Faro).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_transfer_passive_subscribers_listid_post(listid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str listid: (required)
        :param str auth_user:
        :param str authorization:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_transfer_passive_subscribers_listid_post_with_http_info(listid, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_transfer_passive_subscribers_listid_post_with_http_info(listid, **kwargs)  # noqa: E501
            return data

    def admin_transfer_passive_subscribers_listid_post_with_http_info(self, listid, **kwargs):  # noqa: E501
        """Transfers passive customers from Kayak to Mailchimp  # noqa: E501

        Passive subscribers/members/customers are users who don't have active entitlements and haven't opted out from email marketing. For the given list (audience) ID, this endpoint transfers the list of passive subscribers from Kayak to Mailchimp (via Faro).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_transfer_passive_subscribers_listid_post_with_http_info(listid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str listid: (required)
        :param str auth_user:
        :param str authorization:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['listid', 'auth_user', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_transfer_passive_subscribers_listid_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'listid' is set
        if ('listid' not in local_var_params or
                local_var_params['listid'] is None):
            raise ApiValueError("Missing the required parameter `listid` when calling `admin_transfer_passive_subscribers_listid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'listid' in local_var_params:
            path_params['listid'] = local_var_params['listid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'auth_user' in local_var_params:
            header_params['AuthUser'] = local_var_params['auth_user']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/admin/transfer-passive-subscribers/{listid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admin_user_post(self, body, **kwargs):  # noqa: E501
        """Create a new user with admin options.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_user_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminNewUser body: (required)
        :param str auth_user:
        :param str authorization:
        :return: LoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admin_user_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.admin_user_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def admin_user_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new user with admin options.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admin_user_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminNewUser body: (required)
        :param str auth_user:
        :param str authorization:
        :return: LoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body', 'auth_user', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_user_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ApiValueError("Missing the required parameter `body` when calling `admin_user_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'auth_user' in local_var_params:
            header_params['AuthUser'] = local_var_params['auth_user']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/admin/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoginResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
